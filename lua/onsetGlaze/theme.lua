local colors = require("onsetGlaze.colors")

local M = {}
function M.setup()
    local config = require("onsetGlaze.config")
    local options = config.options
    local theme = {
        config = options,
        colors = colors.setup(),
    }
    local c = theme.colors
    theme.highlights = {
            
            ColorColumn = {bg = c.blue},
            Comment = {fg = c.fg2, style = options.styles.comments},
            Conceal = {fg = c.bg1},
            CurSearch = {link = "IncSearch"},
            CurrentWord = {fg = c.bg0, bg = c.base1},
            Cursor = {fg = c.bg1, bg = c.fg0},
            CursorColumn = {bg = c.none},
            CursorIM = {fg = c.bg0, bg = c.fg0},
            CursorLine = {bg = options.transparent and c.bg0 or c.bg1},
            CursorLineNr = {fg = c.base2},
            DiffAdd = {bg = c.diff_add},
            DiffChange = {bg = c.diff_change},
            DiffDelete = {bg = c.diff_delete},
            DiffText = {bg = c.bg1},
            Directory = {fg = c.blue},
            EndOfBuffer = {fg = c.bg1},
            ErrorMsg = {fg = c.red},
            ErrorText = {sp = c.red, undercurl = options.styles.undercurl},
            FloatBorder = {fg = c.base1, bg = options.transparent and c.none or c.bg1},
            FoldColumn = {bg = options.transparent and c.none or c.bg0, fg = c.bg1},
            Folded = {fg = c.blue, bg = c.bg1},
            Foo = {bg = c.purple, fg = c.purple},
            HintText = {sp = c.green, undercurl = false},
            IncSearch = {bg = c.aqua, fg = c.bg0},
            LineNr = {bg = options.transparent and c.none or c.bg1, fg = c.fg1},
            MatchParen = {fg = c.orange, bold = true},
            ModeMsg = {fg = c.fg2, bold = true},
            MoreMsg = {fg = c.blue},
            MsgArea = {fg = c.base2},
            NonText = {fg = c.fg2},
            Normal = {fg = c.fg0, bg = options.transparent and c.none or c.bg0},
            NormalFloat = {fg = c.fg0, bg = options.transparent and c.none or c.bg1},
            NormalNC = {fg = c.fg0, bg = options.transparent and c.none or c.bg0},
            NormalSB = {fg = c.fg0, bg = c.bg0},
            Pmenu = {bg = options.transparent and c.none or c.bg1, fg = c.fg0},
            PmenuSbar = {bg = options.transparent and c.none or c.bg1},
            PmenuSel = {bg = c.fg2, fg = c.base3},
            PmenuThumb = {bg = c.base1},
            Question = {fg = c.blue},
            QuickFixLine = {bg = c.aqua, bold = true, undercurl = options.styles.undercurl},
            Search = {bg = c.bg_normal, fg = c.bg0},
            SignColumn = {bg = options.transparent and c.none or c.bg0},
            SignColumnSB = {bg = c.bg0, fg = c.bg1},
            SpecialKey = {fg = c.fg2},
            SpellBad = {sp = c.red, undercurl = options.styles.undercurl},
            SpellCap = {sp = c.blue, undercurl = options.styles.undercurl},
            SpellLocal = {sp = c.purple, undercurl = options.styles.undercurl},
            SpellRare = {sp = c.green, undercurl = options.styles.undercurl},
            StatusLine = {fg = c.fg0, bg = options.transparent and c.none or c.bg0},
            StatusLineNC = {fg = c.fg2, bg = c.bg_statusline},
            Substitute = {bg = c.red, fg = c.bg0},
            TabLine = {bg = c.bg_statusline1, fg = c.fg2},
            TabLineFill = {bg = c.bg0},
            TabLineSel = {fg = c.bg0, bg = c.blue},
            Title = {fg = c.blue, bold = true},
            VertSplit = {fg = options.transparent and c.bg0 or c.base1},
            Visual = {bg = config.is_day() and c.base1 or c.bg1, fg = config.is_day() and c.fg0 or c.none},
            VisualNOS = {bg = c.bg1},
            WarningMsg = {fg = c.red},
            WarningText = {sp = c.yellow, undercurl = options.styles.undercurl},
            Whitespace = {fg = c.fg2},
            WildMenu = {bg = c.bg1},
            WinSeparator = {fg = options.transparent and c.bg0 or c.bg1, bold = true},
            lCursor = {fg = c.bg0, bg = c.fg0},
            Constant = {fg = c.aqua},
            String = {fg = c.yellow, style = options.styles.string},
            Character = {fg = c.green},
            Number = {fg = c.purple},
            Boolean = {fg = c.purple},
            Float = {fg = c.purple},
            Identifier = {fg = c.blue, style = options.styles.variables},
            Function = {fg = c.green, style = options.styles.functions},
            Statement = {fg = c.red, italic = options.enable_italics},
            Conditional = {fg = c.red, italic = options.enable_italics},
            Repeat = {fg = c.red, italic = options.enable_italics},
            Label = {fg = c.orange},
            Operator = {fg = c.orange},
            Keyword = {fg = c.red, style = options.styles.keywords},
            Exception = {fg = c.red, italic = options.enable_italics},
            PreProc = {fg = c.purple, italic = options.enable_italics},
            PreCondit = {fg = c.purple, italic = options.enable_italics},
            Include = {fg = c.purple, italic = options.enable_italics},
            Define = {fg = c.purple, italic = options.enable_italics},
            Macro = {fg = c.aqua},
            Type = {fg = c.yellow},
            StorageClass = {fg = c.orange},
            Structure = {fg = c.orange},
            Typedef = {fg = c.red, italic = options.enable_italics},
            Special = {fg = c.yellow},
            SpecialChar = {fg = c.yellow},
            Tag = {fg = c.orange},
            Delimiter = {fg = c.fg0},
            SpecialComment = {fg = c.base1},
            Debug = {fg = c.orange},
            Underlined = {underline = true},
            Bold = {bold = true},
            Italic = {italic = true},
            Ignore = {fg = c.base1},
            Error = {fg = c.red},
            Todo = {bg = c.yellow, fg = c.bg0},
            qfLineNr = {fg = c.base1},
            qfFileName = {fg = c.blue},
            RedSign = {fg = c.red},
            YellowSign = {fg = c.yellow},
            GreenSign = {fg = c.green},
            BlueSign = {fg = c.blue},
            VirtualTextWarning = {fg = c.yellow},
            VirtualTextError = {fg = c.red},
            VirtualTextInfo = {fg = c.blue},
            VirtualTextHint = {fg = c.green},
            ErrorFloat = {fg = c.red, bg = options.transparent and c.none or c.bg1},
            WarningFloat = {fg = c.yellow, bg = options.transparent and c.none or c.bg1},
            InfoFloat = {fg = c.blue, bg = options.transparent and c.none or c.bg1},
            HintFloat = {fg = c.green, bg = options.transparent and c.none or c.bg1},
            DiagnosticFloatingError = {link = "ErrorFloat"},
            DiagnosticFloatingWarn = {link = "WarningFloat"},
            DiagnosticFloatingInfo = {link = "InfoFloat"},
            DiagnosticFloatingHint = {link = "HintFloat"},
            DiagnosticError = {link = "ErrorText"},
            DiagnosticWarn = {link = "WarningText"},
            DiagnosticInfo = {link = "InfoText"},
            DiagnosticHint = {link = "HintText"},
            DiagnosticVirtualTextError = {link = "VirtualTextError"},
            DiagnosticVirtualTextWarn = {link = "VirtualTextWarning"},
            DiagnosticVirtualTextInfo = {link = "VirtualTextInfo"},
            DiagnosticVirtualTextHint = {link = "VirtualTextHint"},
            DiagnosticUnderlineError = {link = "ErrorText"},
            DiagnosticUnderlineWarn = {link = "WarningText"},
            DiagnosticUnderlineInfo = {link = "InfoText"},
            DiagnosticUnderlineHint = {link = "HintText"},
            DiagnosticSignError = {link = "RedSign"},
            DiagnosticSignWarn = {link = "YellowSign"},
            DiagnosticSignInfo = {link = "BlueSign"},
            DiagnosticSignHiblue = {link = "GreenSign"},
            LspDiagnosticsFloatingError = {link = "DiagnosticFloatingError"},
            LspDiagnosticsFloatingWarning = {link = "DiagnosticFloatingWarn"},
            LspDiagnosticsFloatingInformation = {link = "DiagnosticFloatingInfo"},
            LspDiagnosticsFloatingHint = {link = "DiagnosticFloatingHint"},
            LspDiagnosticsDefaultError = {link = "DiagnosticError"},
            LspDiagnosticsDefaultWarning = {link = "DiagnosticWarn"},
            LspDiagnosticsDefaultInformation = {link = "DiagnosticInfo"},
            LspDiagnosticsDefaultHint = {link = "DiagnosticHint"},
            LspDiagnosticsVirtualTextError = {link = "DiagnosticVirtualTextError"},
            LspDiagnosticsVirtualTextWarning = {link = "DiagnosticVirtualTextWarn"},
            LspDiagnosticsVirtualTextInformation = {link = "DiagnosticVirtualTextInfo"},
            LspDiagnosticsVirtualTextHint = {link = "DiagnosticVirtualTextHint"},
            LspDiagnosticsUnderlineError = {link = "DiagnosticUnderlineError"},
            LspDiagnosticsUnderlineWarning = {link = "DiagnosticUnderlineWarn"},
            LspDiagnosticsUnderlineInformation = {link = "DiagnosticUnderlineInfo"},
            LspDiagnosticsUnderlineHint = {link = "DiagnosticUnderlineHint"},
            LspDiagnosticsSignError = {link = "DiagnosticSignError"},
            LspDiagnosticsSignWarning = {link = "DiagnosticSignWarn"},
            LspDiagnosticsSignInformation = {link = "DiagnosticSignInfo"},
            LspDiagnosticsSignHint = {link = "DiagnosticSignHint"},
            LspReferenceText = {link = "CurrentWord"},
            LspReferenceRead = {link = "CurrentWord"},
            LspReferenceWrite = {link = "CurrentWord"},
            LspCodeLens = {link = "VirtualTextInfo"},
            LspCodeLensSeparator = {link = "VirtualTextHint"},
            LspSignatureActiveParameter = {link = "Search"},
            TermCursor = {link = "Cursor"},
            healthError = {fg = c.red},
            healthSuccess = {fg = c.green},
            healthWarning = {fg = c.yellow},
            ALEErrorSign = {link = "ErrorMsg"},
            ALEWarningSign = {link = "WarningMsg"},
            TSAnnotation = {fg = c.purple},
            TSAttribute = {fg = c.purple},
            TSBoolean = {fg = c.purple},
            TSCharacter = {fg = c.aqua},
            TSComment = {link = "Comment"},
            TSConditional = {fg = c.red},
            TSConstBuiltin = {fg = c.blue, italic = true},
            TSConstMacro = {fg = c.blue, italic = true},
            TSConstant = {fg = c.fg0},
            TSConstructor = {fg = c.green, bold = true},
            TSException = {fg = c.red},
            TSField = {fg = c.green},
            TSFloat = {fg = c.purple},
            TSFuncBuiltin = {fg = c.green, bold = true},
            TSFuncMacro = {fg = c.green, bold = true},
            TSFunction = {fg = c.green, bold = true},
            TSInclude = {fg = c.red},
            TSKeyword = {fg = c.aqua},
            TSKeywordFunction = {fg = c.aqua},
            TSKeywordOperator = {fg = c.red},
            TSLabel = {fg = c.orange},
            TSMethod = {fg = c.green, bold = true},
            TSNamespace = {fg = c.yellow, italic = true},
            TSNone = {fg = c.fg0},
            TSNumber = {fg = c.purple},
            TSOperator = {fg = c.red},
            TSParameter = {fg = c.orange},
            TSParameterReference = {fg = c.fg0},
            TSProperty = {fg = c.aqua},
            TSPunctBracket = {fg = c.orange},
            TSPunctDelimiter = {fg = c.base1},
            TSPunctSpecial = {fg = c.blue},
            TSRepeat = {fg = c.red},
            TSStorageClass = {fg = c.orange},
            TSString = {fg = c.yellow},
            TSStringEscape = {fg = c.green},
            TSStringRegex = {fg = c.yellow},
            TSSymbol = {fg = c.fg0},
            TSTag = {fg = c.red},
            TSTagDelimiter = {fg = c.fg2},
            TSText = {fg = c.green},
            TSStrike = {fg = c.base1},
            TSMath = {fg = c.blue},
            TSType = {fg = c.aqua},
            TSTypeBuiltin = {fg = c.yellow, italic = true},
            TSURI = {link = "markdownUrl"},
            TSVariable = {fg = c.purple},
            TSVariableBuiltin = {fg = c.blue, italic = true},
            rainbowcol1 = {fg = c.red},
            rainbowcol2 = {fg = c.orange},
            rainbowcol3 = {fg = c.yellow},
            rainbowcol4 = {fg = c.green},
            rainbowcol5 = {fg = c.aqua},
            rainbowcol6 = {fg = c.blue},
            rainbowcol7 = {fg = c.purple},
            TroubleText = {fg = c.fg0},
            TroubleCount = {fg = c.base1},
            TroubleNormal = {fg = c.base1},
            illuminatedWord = {link = "CurrentWord"},
            illuminatedCurWord = {link = "CurrentWord"},
            IlluminatedWordText = {link = "CurrentWord"},
            IlluminatedWordRead = {link = "CurrentWord"},
            IlluminatedWordWrite = {link = "CurrentWord"},
            diffAdded = {fg = c.green},
            diffRemoved = {fg = c.red},
            diffChanged = {fg = c.diff_change},
            diffOldFile = {fg = c.yellow},
            diffNewFile = {fg = c.orange},
            diffFile = {fg = c.aqua},
            diffLine = {fg = c.base1},
            diffIndexLine = {fg = c.purple},
            NeogitBranch = {fg = c.purple},
            NeogitRemote = {fg = c.voilet},
            NeogitHunkHeader = {fg = c.fg0},
            NeogitHunkHeaderHighlight = {fg = c.blue},
            NeogitDiffContextHighlight = {fg = c.fg2},
            NeogitDiffDeleteHighlight = {fg = c.red},
            NeogitDiffAddHighlight = {fg = c.green},
            NeotestPassed = {fg = c.green},
            NeotestRunning = {fg = c.yellow},
            NeotestFailed = {fg = c.red},
            NeotestSkipped = {fg = c.blue},
            NeotestTest = {fg = c.base1},
            NeotestNamespace = {fg = c.green},
            NeotestFocused = {fg = c.yellow},
            NeotestFile = {fg = c.aqua},
            NeotestDir = {fg = c.blue},
            NeotestBorder = {fg = c.blue},
            NeotestIndent = {fg = c.base2},
            NeotestExpandMarker = {fg = c.base2},
            NeotestAdapterName = {fg = c.purple, bold = true},
            NeotestWinSelect = {fg = c.blue},
            NeotestMarked = {fg = c.blue},
            NeotestTarget = {fg = c.blue},
            GitGutterAdd = {link = "GreenSign"},
            GitGutterChange = {link = "BlueSign"},
            GitGutterDelete = {link = "RedSign"},
            GitGutterChangeDelete = {fg = c.purple},
            GitGutterAddLine = {link = "diffAdded"},
            GitGutterChangeLine = {link = "diffChanged"},
            GitGutterDeleteLine = {link = "diffRemoved"},
            GitGutterChangeDeleteLine = {fg = c.purple},
            GitGutterAddLineNr = {fg = c.green},
            GitGutterChangeLineNr = {fg = c.diff_change},
            GitGutterDeleteLineNr = {fg = c.red},
            GitGutterChangeDeleteLineNr = {fg = c.purple},
            GitSignsAdd = {link = "GreenSign"},
            GitSignsChange = {link = "BlueSign"},
            GitSignsDelete = {link = "RedSign"},
            GitSignsAddNr = {fg = c.green},
            GitSignsChangeNr = {fg = c.diff_change},
            GitSignsDeleteNr = {fg = c.red},
            GitSignsAddLn = {link = "diffAdded"},
            GitSignsDeleteLn = {link = "diffRemoved"},
            GitSignsCurrentLineBlame = {fg = c.base1},
            TelescopeMatching = {fg = c.green, bold = true},
            TelescopeBorder = {fg = c.base1, bg = options.transparent and c.none or c.bg0},
            TelescopeNormal = {fg = c.fg0, bg = options.transparent and c.none or c.bg1},
            TelescopePromptPrefix = {fg = c.orange},
            TelescopeSelection = {link = "diffAdded"},
            NvimTreeSymlink = {fg = c.fg0},
            NvimTreeFolderName = {fg = c.bg_normal},
            NvimTreeRootFolder = {fg = c.base1},
            NvimTreeFolderIcon = {fg = c.orange},
            NvimTreeEmptyFolderName = {fg = c.green},
            NvimTreeOpenedFolderName = {fg = c.yellow},
            NvimTreeExecFile = {fg = c.fg0},
            NvimTreeOpenedFile = {fg = c.fg0},
            NvimTreeSpecialFile = {fg = c.fg0},
            NvimTreeImageFile = {fg = c.fg0},
            NvimTreeMarkdownFile = {fg = c.fg0},
            NvimTreeIndentMarker = {fg = c.base1},
            NvimTreeGitDirty = {fg = c.yellow},
            NvimTreeGitStaged = {fg = c.green},
            NvimTreeGitMerge = {fg = c.orange},
            NvimTreeGitRenamed = {fg = c.purple},
            NvimTreeGitNew = {fg = c.aqua},
            NvimTreeGitDeleted = {fg = c.red},
            NvimTreeLspDiagnosticsError = {link = "RedSign"},
            NvimTreeLspDiagnosticsWarning = {link = "YellowSign"},
            NvimTreeLspDiagnosticsInformation = {link = "BlueSign"},
            NvimTreeLspDiagnosticsHint = {link = "GreenSign"},
            NeoTreeDirectoryName = {fg = c.blue},
            NeoTreeDirectoryIcon = {fg = c.blue},
            NeoTreeNormal = {fg = c.fg0, bg = options.transparent and c.none or c.bg0},
            NeoTreeExpander = {fg = c.base1},
            NeoTreeIndentMarker = {fg = c.base1},
            NeoTreeRootName = {fg = c.blue, bold = true},
            NeoTreeSymbolicLinkTarget = {fg = c.purple},
            NeoTreeGitAdded = {fg = c.green},
            NeoTreeGitConflict = {fg = c.red},
            NeoTreeGitDeleted = {fg = c.red},
            NeoTreeGitIgnored = {fg = c.base1},
            NeoTreeGitModified = {fg = c.yellow},
            NeoTreeGitUnstaged = {fg = c.red},
            NeoTreeGitUntracked = {fg = c.blue},
            NeoTreeGitStaged = {fg = c.green},
            NeoTreeFloatBorder = {fg = c.blue},
            NeoTreeFloatTitle = {fg = c.base3},
            NeoTreeFileNameOpened = {fg = c.purple},
            NeoTreeDimText = {fg = c.base1},
            NeoTreeFilterTerm = {fg = c.green, bold = true},
            NeoTreeTabActive = {bg = options.transparent and c.none or c.bg0, fg = c.aqua, bold = true},
            NeoTreeTabInactive = {bg = options.transparent and c.none or c.bg1, fg = c.base2},
            NeoTreeTabSeparatorActive = {fg = options.transparent and c.none or c.bg0,
                bg = options.transparent and c.none or c.bg0},
            NeoTreeTabSeparatorInactive = {fg = options.transparent and c.none or c.bg1,
                bg = options.transparent and c.none or c.bg1},
            NeoTreeVertSplit = {fg = c.base, bg = options.transparent and c.none or c.bg1},
            NeoTreeStatusLineNC = {fg = c.aqua, bg = c.aqua},
            FernBranchText = {fg = c.blue},
            GlyphPalette1 = {fg = c.red},
            GlyphPalette2 = {fg = c.green},
            GlyphPalette3 = {fg = c.yellow},
            GlyphPalette4 = {fg = c.blue},
            GlyphPalette6 = {fg = c.green},
            GlyphPalette7 = {fg = c.fg0},
            GlyphPalette9 = {fg = c.red},
            DashboardShortCut = {fg = c.cyan},
            DashboardHeader = {fg = c.blue},
            DashboardCenter = {fg = c.purple},
            DashboardFooter = {fg = c.red, italic = true},
            AlphaShortcut = {fg = c.orange},
            AlphaHeader = {fg = c.red},
            AlphaHeaderLabel = {fg = c.base2},
            AlphaFooter = {fg = c.red, italic = true},
            WhichKey = {fg = c.red},
            WhichKeyGroup = {fg = c.blue},
            WhichKeyDesc = {fg = c.purple},
            WhichKeySeparator = {fg = c.green},
            WhichKeyFloat = {bg = options.transparent and c.none or c.bg1},
            WhichKeyValue = {fg = c.fg2},
            DiagnosticWarning = {link = "DiagnosticWarn"},
            DiagnosticInformation = {link = "DiagnosticInfo"},
            LspFloatWinNormal = {bg = options.transparent and c.none or c.bg1},
            LspFloatWinBorder = {fg = c.bg0, bg = c.bg0},
            LspSagaBorderTitle = {fg = c.cyan},
            LspSagaCodeActionTitle = {fg = c.purple, bold = true},
            LspSagaDiagnosticError = {fg = c.red},
            LspSagaDiagnosticWarn = {fg = c.yellow},
            LspSagaDiagnosticInfo = {fg = c.blue},
            LspSagaDiagnosticHint = {fg = c.green},
            LspSagaErrorTrunCateLine = {link = "LspSagaDiagnosticError"},
            LspSagaWarnTrunCateLine = {link = "LspSagaDiagnosticWarn"},
            LspSagaInfoTrunCateLine = {link = "LspSagaDiagnosticInfo"},
            LspSagaHintTrunCateLine = {link = "LspSagaDiagnosticHint"},
            LspSagaDiagnosticSource = {fg = c.orange},
            LspSagaDiagnosticBorder = {fg = c.orange},
            LspSagaRenameBorder = {fg = c.purple},
            LspSagaRenamePromptPrefix = {fg = c.blue},
            LspSagaCodeActionBorder = {fg = c.purple},
            LspSagaCodeActionTruncateLine = {fg = c.purple},
            LspSagaCodeActionContent = {fg = c.green},
            LspSagaHoverBorder = {fg = c.green},
            LspSagaDocTruncateLine = {fg = c.green},
            LspSagaSignatureHelpBorder = {fg = c.green},
            LspSagaShTruncateLine = {fg = c.green},
            LspSagaDefPreviewBorder = {fg = c.blue},
            DefinitionIcon = {fg = c.blue},
            LspLinesDiagBorder = {fg = c.yellow},
            LineDiagTuncateLine = {fg = c.yellow},
            LspSagaAutoPreview = {fg = c.green},
            LspSagaFinderSelection = {fg = c.fg0},
            ReferencesCount = {fg = c.base1},
            DefinitionCount = {fg = c.base1},
            TargetFileName = {fg = c.base1},
            DefinitionPreviewTitle = {fg = c.blue, bold = true},
            TargetWord = {fg = c.cyan},
            BufferLineIndicatorSelected = {link = "GreenSign"},
            BufferCurrent = {bg = c.fg2, fg = c.fg0},
            BufferCurrentIndex = {bg = c.fg2, fg = c.base2},
            BufferCurrentMod = {bg = c.fg2, fg = c.yellow},
            BufferCurrentSign = {bg = c.fg2, fg = c.yellow},
            BufferCurrentTarget = {bg = c.fg2, fg = c.red},
            BufferVisible = {bg = c.bg1, fg = c.fg0},
            BufferVisibleIndex = {bg = c.bg1, fg = c.yellow},
            BufferVisibleMod = {bg = c.bg1, fg = c.red},
            BufferVisibleSign = {bg = c.bg1, fg = c.green},
            BufferVisibleTarget = {bg = c.bg1, fg = c.red},
            BufferInactive = {bg = c.bg1, fg = c.base2},
            BufferInactiveIndex = {bg = c.bg1, fg = c.base2},
            BufferInactiveMod = {bg = c.bg1, fg = c.red},
            BufferInactiveSign = {bg = c.bg1, fg = c.blue},
            BufferInactiveTarget = {bg = c.bg1, fg = c.red},
            BufferTabpages = {bg = c.bg1, fg = c.none},
            BufferTabpage = {bg = c.bg1, fg = c.blue},
            Sneak = {link = "Search"},
            SneakScope = {link = "DiffText"},
            HopNextKey = {fg = c.purple, bold = true},
            HopNextKey1 = {fg = c.blue, bold = true},
            HopNextKey2 = {fg = c.aqua},
            HopUnmatched = {fg = c.base3},
            LeapMatch = {bg = c.purple, fg = c.fg0, bold = true},
            LeapLabelPrimary = {fg = c.purple, bold = true},
            LeapLabelSecondary = {fg = c.green, bold = true},
            LeapBackdrop = {fg = c.base2},
            LightspeedGreyWash = {fg = c.base2},
            LightspeedCursor = {link = "Cursor"},
            LightspeedLabel = {fg = c.voilet, bold = true, underline = true},
            LightspeedLabelDistant = {fg = c.green, bold = true, underline = true},
            LightspeedLabelDistantOverlapped = {fg = c.green, underline = true},
            LightspeedLabelOverlapped = {fg = c.voilet, underline = true},
            LightspeedMaskedChar = {fg = c.orange},
            LightspeedOneCharMatch = {bg = c.purple, fg = c.fg0, bold = true},
            LightspeedPendingOpArea = {bg = c.purple, fg = c.fg0},
            LightspeedShortcut = {bg = c.voilet, fg = c.fg0, bold = true, underline = true},
            LightspeedUnlabeledMatch = {fg = c.aqua, bold = true},
            CmpDocumentation = {fg = c.fg0, bg = options.transparent and c.none or c.bg1},
            CmpDocumentationBorder = {fg = c.bg1, bg = options.transparent and c.none or c.bg0},
            CmpItemKindDefault = {fg = c.fg_dark, bg = c.none},
            CmpItemAbbrMatch = {fg = c.green, bold = true},
            CmpItemAbbrMatchFuzzy = {fg = c.green, bold = true},
            CmpItemAbbr = {fg = c.fg0},
            CmpItemAbbrDeprecated = {fg = c.base1},
            CmpItemMenu = {fg = c.fg0},
            CmpItemKind = {fg = c.yellow},
            CmpItemKindText = {fg = c.fg0},
            CmpItemKindMethod = {fg = c.green},
            CmpItemKindFunction = {fg = c.green},
            CmpItemKindConstructor = {fg = c.green},
            CmpItemKindField = {fg = c.green},
            CmpItemKindVariable = {fg = c.blue},
            CmpItemKindClass = {fg = c.yellow},
            CmpItemKindInterface = {fg = c.yellow},
            CmpItemKindModule = {fg = c.yellow},
            CmpItemKindProperty = {fg = c.blue},
            CmpItemKindUnit = {fg = c.purple},
            CmpItemKindValue = {fg = c.purple},
            CmpItemKindEnum = {fg = c.yellow},
            CmpItemKindKeyword = {fg = c.red},
            CmpItemKindSnippet = {fg = c.aqua},
            CmpItemKindColor = {fg = c.aqua},
            CmpItemKindFile = {fg = c.aqua},
            CmpItemKindReference = {fg = c.aqua},
            CmpItemKindFolder = {fg = c.aqua},
            CmpItemKindEnumMember = {fg = c.purple},
            CmpItemKindConstant = {fg = c.blue},
            CmpItemKindStruct = {fg = c.yellow},
            CmpItemKindEvent = {fg = c.orange},
            CmpItemKindOperator = {fg = c.orange},
            CmpItemKindTypeParameter = {fg = c.yellow},
            NavicIconsFile = {fg = c.fg0},
            NavicIconsModule = {fg = c.yellow},
            NavicIconsNamespace = {fg = c.fg},
            NavicIconsPackage = {fg = c.fg},
            NavicIconsClass = {fg = c.orange},
            NavicIconsMethod = {fg = c.blue},
            NavicIconsProperty = {fg = c.green},
            NavicIconsField = {fg = c.green},
            NavicIconsConstructor = {fg = c.orange},
            NavicIconsEnum = {fg = c.orange},
            NavicIconsInterface = {fg = c.orange},
            NavicIconsFunction = {fg = c.blue},
            NavicIconsVariable = {fg = c.purple},
            NavicIconsConstant = {fg = c.purple},
            NavicIconsString = {fg = c.yellow},
            NavicIconsNumber = {fg = c.orange},
            NavicIconsBoolean = {fg = c.orange},
            NavicIconsArray = {fg = c.orange},
            NavicIconsObject = {fg = c.orange},
            NavicIconsKey = {fg = c.purple},
            NavicIconsKeyword = {fg = c.purple},
            NavicIconsNull = {fg = c.orange},
            NavicIconsEnumMember = {fg = c.green},
            NavicIconsStruct = {fg = c.orange},
            NavicIconsEvent = {fg = c.orange},
            NavicIconsOperator = {fg = c.fg0},
            NavicIconsTypeParameter = {fg = c.green},
            NavicText = {fg = c.fg0},
            NavicSeparator = {fg = c.fg0},
            IndentBlanklineContextChar = {fg = c.base1},
            ScrollbarHandle = {fg = c.none, bg = c.bg1},
            ScrollbarSearchHandle = {fg = c.orange, bg = c.bg1},
            ScrollbarSearch = {fg = c.orange, bg = c.none},
            ScrollbarErrorHandle = {fg = c.red, bg = c.bg1},
            ScrollbarError = {fg = c.red, bg = c.none},
            ScrollbarWarnHandle = {fg = c.yellow, bg = c.bg1},
            ScrollbarWarn = {fg = c.yellow, bg = c.none},
            ScrollbarInfoHandle = {fg = c.green, bg = c.bg1},
            ScrollbarInfo = {fg = c.green, bg = c.none},
            ScrollbarHintHandle = {fg = c.blue, bg = c.bg1},
            ScrollbarHint = {fg = c.blue, bg = c.none},
            ScrollbarMiscHandle = {fg = c.purple, bg = c.bg1},
            ScrollbarMisc = {fg = c.purple, bg = c.none},
            YankyPut = {link = "IncSearch"},
            YankyYanked = {link = "IncSearch"},
            NotifyERRORBorder = {fg = c.red},
            NotifyWARNBorder = {fg = c.yellow},
            NotifyINFOBorder = {fg = c.green},
            NotifyDEBUGBorder = {fg = c.base1},
            NotifyTRACEBorder = {fg = c.purple},
            NotifyERRORIcon = {fg = c.red},
            NotifyWARNIcon = {fg = c.yellow},
            NotifyINFOIcon = {fg = c.green},
            NotifyDEBUGIcon = {fg = c.base1},
            NotifyTRACEIcon = {fg = c.purple},
            NotifyERRORTitle = {fg = c.red},
            NotifyWARNTitle = {fg = c.yellow},
            NotifyINFOTitle = {fg = c.green},
            NotifyDEBUGTitle = {fg = c.base1},
            NotifyTRACETitle = {fg = c.purple},
            MiniCompletionActiveParameter = {underline = true},
            MiniCursorword = {bg = c.fg2},
            MiniCursorwordCurrent = {bg = c.fg2},
            MiniIndentscopeSymbol = {fg = c.blue},
            MiniIndentscopePrefix = {nocombine = true},
            MiniJump = {bg = c.purple, fg = "#ffffff"},
            MiniJump2dSpot = {fg = c.purple, bold = true, nocombine = true},
            MiniStarterCurrent = {nocombine = true},
            MiniStarterFooter = {fg = c.yellow, italic = true},
            MiniStarterHeader = {fg = c.blue},
            MiniStarterInactive = {fg = c.base1, style = options.styles.comments},
            MiniStarterItem = {fg = c.fg0, bg = options.transparent and c.none or c.bg},
            MiniStarterItemBullet = {fg = c.base2},
            MiniStarterItemPrefix = {fg = c.red},
            MiniStarterSection = {fg = c.blue},
            MiniStarterQuery = {fg = c.green},
            MiniStatuslineDevinfo = {fg = c.fg1, bg = c.bg1},
            MiniStatuslineFileinfo = {fg = c.fg1, bg = c.bg1},
            MiniStatuslineFilename = {fg = c.fg1, bg = c.fg2},
            MiniStatuslineInactive = {fg = c.blue, bg = c.bg1},
            MiniStatuslineModeCommand = {fg = "BLACK", bg = c.yellow, bold = true},
            MiniStatuslineModeInsert = {fg = "BLACK", bg = c.green, bold = true},
            MiniStatuslineModeNormal = {fg = "BLACK", bg = c.blue, bold = true},
            MiniStatuslineModeOther = {fg = "BLACK", bg = c.aqua, bold = true},
            MiniStatuslineModeReplace = {fg = "BLACK", bg = c.red, bold = true},
            MiniStatuslineModeVisual = {fg = "BLACK", bg = c.magenta, bold = true},
            MiniSurround = {bg = c.orange, fg = "BLACK"},
            MiniTablineCurrent = {fg = c.fg1, bg = c.fg2},
            MiniTablineFill = {bg = "BLACK"},
            MiniTablineHidden = {fg = "BLACK", bg = c.bg1},
            MiniTablineModifiedCurrent = {fg = c.red, bg = c.fg2},
            MiniTablineModifiedHidden = {bg = c.bg1, fg = c.red},
            MiniTablineModifiedVisible = {fg = c.yellow, bg = c.bg1},
            MiniTablineTabpagesection = {bg = c.bg1, fg = c.none},
            MiniTablineVisible = {fg = c.fg, bg = c.bg1},
            MiniTestEmphasis = {bold = true},
            MiniTestFail = {fg = c.red, bold = true},
            MiniTestPass = {fg = c.green, bold = true},
            MiniTrailspace = {bg = c.red},
            NoiceCompletionItemKindDefault = {fg = c.fg2, bg = c.none},
            NoiceCompletionItemKindKeyword = {fg = c.cyan, bg = c.none},
            NoiceCompletionItemKindVariable = {fg = c.magenta, bg = c.none},
            NoiceCompletionItemKindConstant = {fg = c.magenta, bg = c.none},
            NoiceCompletionItemKindReference = {fg = c.magenta, bg = c.none},
            NoiceCompletionItemKindValue = {fg = c.magenta, bg = c.none},
            NoiceCompletionItemKindFunction = {fg = c.blue, bg = c.none},
            NoiceCompletionItemKindMethod = {fg = c.blue, bg = c.none},
            NoiceCompletionItemKindConstructor = {fg = c.blue, bg = c.none},
            NoiceCompletionItemKindClass = {fg = c.orange, bg = c.none},
            NoiceCompletionItemKindInterface = {fg = c.orange, bg = c.none},
            NoiceCompletionItemKindStruct = {fg = c.orange, bg = c.none},
            NoiceCompletionItemKindEvent = {fg = c.orange, bg = c.none},
            NoiceCompletionItemKindEnum = {fg = c.orange, bg = c.none},
            NoiceCompletionItemKindUnit = {fg = c.orange, bg = c.none},
            NoiceCompletionItemKindModule = {fg = c.yellow, bg = c.none},
            NoiceCompletionItemKindProperty = {fg = c.green, bg = c.none},
            NoiceCompletionItemKindField = {fg = c.green, bg = c.none},
            NoiceCompletionItemKindTypeParameter = {fg = c.green, bg = c.none},
            NoiceCompletionItemKindEnumMember = {fg = c.green, bg = c.none},
            NoiceCompletionItemKindOperator = {fg = c.green, bg = c.none},
            NoiceCompletionItemKindSnippet = {fg = "BLACK", bg = c.none},
            htmlH1 = {fg = c.red, bold = true},
            htmlH2 = {fg = c.orange, bold = true},
            htmlH3 = {fg = c.yellow, bold = true},
            htmlH4 = {fg = c.green, bold = true},
            htmlH5 = {fg = c.blue, bold = true},
            htmlH6 = {fg = c.purple, bold = true},
            htmlLink = {underline = true},
            htmlBold = {bold = true},
            htmlBoldUnderline = {underline = true, bold = true},
            htmlBoldItalics = {italic = true, bold = true},
            htmlBoldUnderlineItalic = {underline = true, italic = true, bold = true},
            htmlUnderline = {underline = true},
            htmlUnderlineItalic = {italic = true, underline = true},
            htmlItalic = {italic = true},
            mkdCodeDelimiter = {bg = c.bg0, fg = c.fg0},
            markdownH1 = {fg = c.red, bold = true},
            markdownH2 = {fg = c.orange, bold = true},
            markdownH3 = {fg = c.yellow, bold = true},
            markdownH4 = {fg = c.green, bold = true},
            markdownH5 = {fg = c.blue, bold = true},
            markdownH6 = {fg = c.purple, bold = true},
            markdownUrl = {fg = c.blue, underline = true},
            markdownItalic = {italic = true},
            markdownBold = {bold = true},
            markdownItalicDelimiter = {fg = c.base1, italic = true},
            markdownCode = {fg = c.green},
            markdownCodeBlock = {fg = c.aqua},
            markdownCodeDelimiter = {fg = c.aqua},
            markdownBlockquote = {fg = c.fg2},
            markdownListMarker = {fg = c.red},
            markdownOrderedListMarker = {fg = c.red},
            markdownRule = {fg = c.purple},
            markdownHeadingRule = {fg = c.base1},
            markdownUrlDelimiter = {fg = c.base1},
            markdownLinkDelimiter = {fg = c.base1},
            markdownLinkTextDelimiter = {fg = c.base1},
            markdownHeadingDelimiter = {fg = c.base1},
            markdownLinkText = {fg = c.purple},
            markdownUrlTitleDelimiter = {fg = c.base1},
            markdownIdDeclaration = {link = "markdownLinkText"},
            markdownBoldDelimiter = {fg = c.base1},
            markdownId = {fg = c.yellow},
            ["@punctuation.special.markdown"] = {fg = c.orange, bold = true},
            ["@text.literal.markdown_inline"] = {bg = c.bg0, fg = c.blue},
            cssAttrComma = {fg = c.fg0},
            cssBraces = {fg = c.red},
            cssTagName = {fg = c.red, italic = options.enable_italics},
            cssClassNameDot = {fg = c.green},
            cssClassName = {fg = c.green, italic = options.enable_italics},
            cssFunctionName = {fg = c.green},
            cssAttr = {fg = c.orange},
            cssProp = {fg = c.fg0},
            cssCommonAttr = {fg = c.aqua},
            cssPseudoClassId = {fg = c.aqua},
            cssPseudoClassFn = {fg = c.green},
            cssPseudoClass = {fg = c.purple},
            cssImportant = {fg = c.red, italic = options.enable_italics},
            cssSelectorOp = {fg = c.orange},
            cssSelectorOp2 = {fg = c.orange},
            cssColor = {fg = c.green},
            cssAttributeSelector = {fg = c.aqua},
            cssUnitDecorators = {fg = c.red},
            cssValueLength = {fg = c.purple},
            cssValueInteger = {fg = c.purple},
            cssValueNumber = {fg = c.purple},
            cssValueAngle = {fg = c.purple},
            cssValueTime = {fg = c.purple},
            cssValueFrequency = {fg = c.purple},
            cssVendor = {fg = c.base1},
            cssNoise = {fg = c.base1},
            javaScriptNull = {fg = c.aqua},
            javaScriptIdentifier = {fg = c.orange},
            javaScriptParens = {fg = c.fg0},
            javaScriptBraces = {fg = c.fg0},
            javaScriptGlobal = {fg = c.yellow},
            javaScriptMessage = {fg = c.yellow},
            javaScriptFunction = {fg = c.red, italic = options.enable_italics},
            javaScriptOperator = {fg = c.orange},
            javaScriptMember = {fg = c.aqua},
            pythonBuiltin = {fg = c.yellow},
            pythonExceptions = {fg = c.yellow},
            pythonDecoratorName = {fg = c.blue},
            luaFunc = {fg = c.green, style = options.styles.bold},
            luaFunction = {fg = c.aqua},
            luaTable = {fg = c.fg0},
            luaIn = {fg = c.red, italic = options.enable_italics},
            goDirective = {fg = c.purple, italic = options.enable_italics},
            goConstants = {fg = c.aqua},
            goDeclType = {fg = c.orange, italic = options.enable_italics},
            rustStructure = {fg = c.orange},
            rustIdentifier = {fg = c.purple},
            rustModPath = {fg = c.orange},
            rustModPathSep = {fg = c.fg0},
            rustSelf = {fg = c.blue},
            rustSuper = {fg = c.blue},
            rustDeriveTrait = {fg = c.purple, italic = options.enable_italics},
            rustEnumVariant = {fg = c.purple},
            rustMacroVariable = {fg = c.blue},
            rustAssert = {fg = c.aqua},
            rustPanic = {fg = c.aqua},
            rustPubScopeCrate = {fg = c.purple, italic = options.enable_italics},
            phpVarSelector = {fg = c.blue},
            phpDefine = {fg = c.orange, italic = options.enable_italics},
            phpStructure = {fg = c.red, italic = options.enable_italics},
            phpSpecialFunction = {fg = c.green, bold = true},
            phpInterpSimpleCurly = {fg = c.yellow},
            phpComparison = {fg = c.orange},
            phpMethodsVar = {fg = c.aqua},
            phpMemberSelector = {fg = c.green},
            javaClassDecl = {fg = c.red, italic = options.enable_italics},
            javaMethodDecl = {fg = c.red, italic = options.enable_italics},
            javaVarArg = {fg = c.green},
            javaAnnotation = {fg = c.blue},
            javaUserLabel = {fg = c.purple},
            javaTypedef = {fg = c.aqua},
            javaParen = {fg = c.fg0},
            javaParen1 = {fg = c.fg0},
            javaParen2 = {fg = c.fg0},
            javaParen3 = {fg = c.fg0},
            javaParen4 = {fg = c.fg0},
            javaParen5 = {fg = c.fg0},
            rubyKeywordAsMethod = {fg = c.green, bold = true},
            rubyInterpolation = {fg = c.yellow},
            rubyInterpolationDelimiter = {fg = c.yellow},
            rubyStringDelimiter = {fg = c.yellow},
            rubyBlockParameterList = {fg = c.blue},
            rubyDefine = {fg = c.red, italic = options.enable_italics},
            rubyModuleName = {fg = c.purple},
            rubyAccess = {fg = c.orange},
            rubyAttribute = {fg = c.yellow},
            rubyMacro = {fg = c.red, italic = options.enable_italics},
            shRange = {fg = c.fg0},
            shTestOpr = {fg = c.orange},
            shOption = {fg = c.aqua},
            bashStatement = {fg = c.orange},
            shOperator = {fg = c.orange},
            shQuote = {fg = c.green},
            shSet = {fg = c.orange},
            shSetList = {fg = c.blue},
            shSnglCase = {fg = c.orange},
            shVariable = {fg = c.blue},
            shVarAssign = {fg = c.orange},
            shCmdSubRegion = {fg = c.green},
            shCommandSub = {fg = c.orange},
            shFunctionOne = {fg = c.green, bold = true},
            shFunctionKey = {fg = c.red, italic = options.enable_italics},
            zshOptStart = {fg = c.purple, italic = options.enable_italics},
            zshOption = {fg = c.blue},
            zshSubst = {fg = c.yellow},
            zshFunction = {fg = c.green, bold = true},
            zshDeref = {fg = c.blue},
            zshTypes = {fg = c.orange},
            zshVariableDef = {fg = c.blue},
            vimLet = {fg = c.orange},
            vimFunction = {fg = c.green, bold = true},
            vimIsCommand = {fg = c.fg0},
            vimUserFunc = {fg = c.green, bold = true},
            vimFuncName = {fg = c.green, bold = true},
            vimMap = {fg = c.purple, italic = options.enable_italics},
            vimNotation = {fg = c.aqua},
            vimMapLhs = {fg = c.green},
            vimMapRhs = {fg = c.green},
            vimSetEqual = {fg = c.yellow},
            vimOption = {fg = c.aqua},
            vimUserAttrbKey = {fg = c.yellow},
            vimUserAttrb = {fg = c.green},
            vimAutoCmdSfxList = {fg = c.aqua},
            vimSynType = {fg = c.orange},
            vimHiBang = {fg = c.orange},
            vimSet = {fg = c.yellow},
            vimSetSep = {fg = c.base1},
            vimContinue = {fg = c.base1},
            makeIdent = {fg = c.aqua},
            makeSpecTarget = {fg = c.yellow},
            makeTarget = {fg = c.blue},
            makeCommands = {fg = c.orange},
            cmakeCommand = {fg = c.orange},
            cmakeKWconfigure_package_config_file = {fg = c.yellow},
            cmakeKWwrite_basic_package_version_file = {fg = c.yellow},
            cmakeKWExternalProject = {fg = c.aqua},
            cmakeKWadd_compile_definitions = {fg = c.aqua},
            cmakeKWadd_compile_options = {fg = c.aqua},
            cmakeKWadd_custom_command = {fg = c.aqua},
            cmakeKWadd_custom_target = {fg = c.aqua},
            cmakeKWadd_definitions = {fg = c.aqua},
            cmakeKWadd_dependencies = {fg = c.aqua},
            cmakeKWadd_executable = {fg = c.aqua},
            cmakeKWadd_library = {fg = c.aqua},
            cmakeKWadd_link_options = {fg = c.aqua},
            cmakeKWadd_subdirectory = {fg = c.aqua},
            cmakeKWadd_test = {fg = c.aqua},
            cmakeKWbuild_command = {fg = c.aqua},
            cmakeKWcmake_host_system_information = {fg = c.aqua},
            cmakeKWcmake_minimum_required = {fg = c.aqua},
            cmakeKWcmake_parse_arguments = {fg = c.aqua},
            cmakeKWcmake_policy = {fg = c.aqua},
            cmakeKWconfigure_file = {fg = c.aqua},
            cmakeKWcreate_test_sourcelist = {fg = c.aqua},
            cmakeKWctest_build = {fg = c.aqua},
            cmakeKWctest_configure = {fg = c.aqua},
            cmakeKWctest_coverage = {fg = c.aqua},
            cmakeKWctest_memcheck = {fg = c.aqua},
            cmakeKWctest_run_script = {fg = c.aqua},
            cmakeKWctest_start = {fg = c.aqua},
            cmakeKWctest_submit = {fg = c.aqua},
            cmakeKWctest_test = {fg = c.aqua},
            cmakeKWctest_update = {fg = c.aqua},
            cmakeKWctest_upload = {fg = c.aqua},
            cmakeKWdefine_property = {fg = c.aqua},
            cmakeKWdoxygen_add_docs = {fg = c.aqua},
            cmakeKWenable_language = {fg = c.aqua},
            cmakeKWenable_testing = {fg = c.aqua},
            cmakeKWexec_program = {fg = c.aqua},
            cmakeKWexecute_process = {fg = c.aqua},
            cmakeKWexport = {fg = c.aqua},
            cmakeKWexport_library_dependencies = {fg = c.aqua},
            cmakeKWfile = {fg = c.aqua},
            cmakeKWfind_file = {fg = c.aqua},
            cmakeKWfind_library = {fg = c.aqua},
            cmakeKWfind_package = {fg = c.aqua},
            cmakeKWfind_path = {fg = c.aqua},
            cmakeKWfind_program = {fg = c.aqua},
            cmakeKWfltk_wrap_ui = {fg = c.aqua},
            cmakeKWforeach = {fg = c.aqua},
            cmakeKWfunction = {fg = c.aqua},
            cmakeKWget_cmake_property = {fg = c.aqua},
            cmakeKWget_directory_property = {fg = c.aqua},
            cmakeKWget_filename_component = {fg = c.aqua},
            cmakeKWget_property = {fg = c.aqua},
            cmakeKWget_source_file_property = {fg = c.aqua},
            cmakeKWget_target_property = {fg = c.aqua},
            cmakeKWget_test_property = {fg = c.aqua},
            cmakeKWif = {fg = c.aqua},
            cmakeKWinclude = {fg = c.aqua},
            cmakeKWinclude_directories = {fg = c.aqua},
            cmakeKWinclude_external_msproject = {fg = c.aqua},
            cmakeKWinclude_guard = {fg = c.aqua},
            cmakeKWinstall = {fg = c.aqua},
            cmakeKWinstall_files = {fg = c.aqua},
            cmakeKWinstall_programs = {fg = c.aqua},
            cmakeKWinstall_targets = {fg = c.aqua},
            cmakeKWlink_directories = {fg = c.aqua},
            cmakeKWlist = {fg = c.aqua},
            cmakeKWload_cache = {fg = c.aqua},
            cmakeKWload_command = {fg = c.aqua},
            cmakeKWmacro = {fg = c.aqua},
            cmakeKWmark_as_advanced = {fg = c.aqua},
            cmakeKWmath = {fg = c.aqua},
            cmakeKWmessage = {fg = c.aqua},
            cmakeKWoption = {fg = c.aqua},
            cmakeKWproject = {fg = c.aqua},
            cmakeKWqt_wrap_cpp = {fg = c.aqua},
            cmakeKWqt_wrap_ui = {fg = c.aqua},
            cmakeKWremove = {fg = c.aqua},
            cmakeKWseparate_arguments = {fg = c.aqua},
            cmakeKWset = {fg = c.aqua},
            cmakeKWset_directory_properties = {fg = c.aqua},
            cmakeKWset_property = {fg = c.aqua},
            cmakeKWset_source_files_properties = {fg = c.aqua},
            cmakeKWset_target_properties = {fg = c.aqua},
            cmakeKWset_tests_properties = {fg = c.aqua},
            cmakeKWsource_group = {fg = c.aqua},
            cmakeKWstring = {fg = c.yellow},
            cmakeKWsubdirs = {fg = c.aqua},
            cmakeKWtarget_compile_definitions = {fg = c.aqua},
            cmakeKWtarget_compile_features = {fg = c.aqua},
            cmakeKWtarget_compile_options = {fg = c.aqua},
            cmakeKWtarget_include_directories = {fg = c.aqua},
            cmakeKWtarget_link_directories = {fg = c.aqua},
            cmakeKWtarget_link_libraries = {fg = c.aqua},
            cmakeKWtarget_link_options = {fg = c.aqua},
            cmakeKWtarget_precompile_headers = {fg = c.aqua},
            cmakeKWtarget_sources = {fg = c.aqua},
            cmakeKWtry_compile = {fg = c.aqua},
            cmakeKWtry_run = {fg = c.aqua},
            cmakeKWunset = {fg = c.aqua},
            cmakeKWuse_mangled_mesa = {fg = c.aqua},
            cmakeKWvariable_requires = {fg = c.aqua},
            cmakeKWvariable_watch = {fg = c.aqua},
            cmakeKWwrite_file = {fg = c.aqua},
            jsonKeyword = {fg = c.fg0},
            jsonQuote = {fg = c.base1},
            jsonBraces = {fg = c.orange},
            yamlKey = {fg = c.orange},
            yamlConstant = {fg = c.purple},
            tomlKey = {fg = c.orange},
            tomlBoolean = {fg = c.aqua},
            tomlTableArray = {link = "tomlTable"},
    
    }
    
    theme.defer = {}
    
    if options.hide_inactive_statusline then
        local inactive = {underline = true, bg = c.none, fg = c.bg, sp = c.border}
        theme.highlights.StatusLineNC = inactive
        for _, section in ipairs({"a", "b", "c"}) do
            theme.defer["lualine_" .. section .. "_inactive"] = inactive
        end
        theme.highlights.MiniStatuslineInactive = inactive
    end
    return theme
end

return M
